trigger: none

variables:
- group: terraform-aws-config

pool:
    vmImage: 'ubuntu-latest'
    
steps:
- task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
  displayName: install terraform
  inputs:
    terraformVersion: latest

# Terraform init
- task: TerraformTaskV3@3
  displayName: 'Terraform Init'
  inputs:
    provider: 'aws'
    command: 'init'
    workingDirectory: '$(System.DefaultWorkingDirectory)/AWS-PIPELINE'
    backendServiceAWS: $(backendServiceAWS)
    backendAWSBucketName: $(backendAWSBucketName)
    backendAWSKey: $(backendAWSKey)

# Terraform Validate
- task: TerraformTaskV3@3
  displayName: 'Terraform Validate'
  inputs:
    provider: 'aws'
    command: 'validate'
    workingDirectory: '$(System.DefaultWorkingDirectory)/AWS-PIPELINE'
    environmentServiceNameAWS: $(backendServiceAWS)

# Create artifact directory
- bash: |
      mkdir -p $(Pipeline.Workspace)/Output
  name: 'Directory'
  displayName: 'Create artifact directory'

# Terraform Plan
- task: TerraformTaskV3@3
  displayName: 'Terraform Plan'
  inputs:
    provider: 'aws'
    command: 'plan'
    workingDirectory: '$(System.DefaultWorkingDirectory)/AWS-PIPELINE'
    environmentServiceNameAWS: $(backendServiceAWS)
    # publishPlanResults: 'terraform.tfplan'
    # commandOptions: '-out=$(Pipeline.Workspace)/Output/terraform.tfplan'
    # name: 'Variable'
    # displayName: 'Set variable'
    # commandOptions:  '-out=$(Pipeline.Workspace)/output/tfplan.out'
    publishPlanResults: 'tfplan.out'
- bash: |
    if [ "$TERRAFORM_PLAN_HAS_CHANGES" = true ] ; then
      echo "##vso[task.setvariable variable=ShouldRun;isOutput=true]true"
      fi
  name: 'Variable'
  displayName: 'Set variable'

# Publish Terraform Plan artifact
- task: PublishPipelineArtifact@1
  displayName: 'Publish plan artifact'
  inputs:
    targetPath: '$(Pipeline.Workspace)/output'
    #artifact: 'Evaluate'
    publishLocation: 'pipeline'
    condition: and(succeeded(), eq(dependencies.plan.outputs['Deploy.Variable.ShouldRun'], 'true'))


- task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
  displayName: install terraform
  inputs:
    terraformVersion: latest

# Terraform init
- task: TerraformTaskV3@3
  displayName: 'Terraform Init'
  inputs:
    provider: 'aws'
    command: 'init'
    workingDirectory: '$(System.DefaultWorkingDirectory)/AWS-PIPELINE'
    backendServiceAWS: $(backendServiceAWS)
    backendAWSBucketName: $(backendAWSBucketName)
    backendAWSKey: $(backendAWSKey)    

# Apply Terraform Plan
- task: TerraformTaskV3@3
  
  inputs:
    provider: 'aws'
    command: 'apply'
    workingDirectory: '$(System.DefaultWorkingDirectory)/AWS-PIPELINE'
    commandOptions:  '$(Pipeline.Workspace)/Output/Evaluate/terraform.tfplan'
    environmentServiceNameAWS: $(backendServiceAWS)     