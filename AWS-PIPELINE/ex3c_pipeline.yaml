trigger: none

variables:
- group: terraform-aws-config

pool:
    vmImage: 'ubuntu-latest'  
steps:
- task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
  displayName: install terraform
  inputs:
    terraformVersion: latest
- task: TerraformTaskV3@3
  displayName: 'Terraform Init'
  inputs:
    provider: 'aws'
    command: 'init'
    workingDirectory: '$(System.DefaultWorkingDirectory)/AWS-PIPELINE'
    backendServiceAWS: $(backendServiceAWS)
    backendAWSBucketName: $(backendAWSBucketName)
    backendAWSKey: $(backendAWSKey)        
- task: TerraformTaskV3@3
  displayName: 'Terraform Validate'
  inputs:
    provider: 'aws'
    command: 'validate'
    workingDirectory: '$(System.DefaultWorkingDirectory)/AWS-PIPELINE'
    environmentServiceNameAWS: $(backendServiceAWS)
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: 
      'mkdir -p $(Pipeline.Workspace)/output'        
- task: TerraformTaskV3@3
  displayName: 'Terraform Plan'
  inputs:
    provider: 'aws'
    command: 'plan'
    workingDirectory: '$(System.DefaultWorkingDirectory)/AWS-PIPELINE'
    environmentServiceNameAWS: $(backendServiceAWS)
    commandOptions:  '-out=$(Pipeline.Workspace)/output/tfplan.out'
    publishPlanResults: 'tfplan.out'
    name: 'Variable'
    displayName: 'Set variable'
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Pipeline.Workspace)/output'
    publishLocation: 'pipeline'  
- task: TerraformTaskV3@3
  displayName: 'Terraform Apply'
  inputs:
    provider: 'aws'
    command: 'apply'
    workingDirectory: '$(System.DefaultWorkingDirectory)/AWS-PIPELINE'
    commandOptions:  '$(Pipeline.Workspace)/plan.Deploy/tfplan.out'
    environmentServiceNameAWS: $(backendServiceAWS)     