trigger: none

variables:
- group: terraform-aws-config

pool:
    vmImage: 'ubuntu-latest'

# Define steps     
steps:


# Install Terraform
- task: TerraformInstaller@0
  displayName: install terraform
  inputs:
    terraformVersion: latest

# Terraform init
- task: TerraformCLI@0
  displayName: 'Terraform Init'
  inputs:
    command: 'init'
    workingDirectory: '$(System.DefaultWorkingDirectory)/session5/'
    backendType: 'aws'
    backendServiceAws: $(providerServiceAws)
    backendAwsRegion: $(backendAwsRegion)
    backendAwsBucket: '$(backendAwsBucket)'
    backendAwsKey: '$(backendAwsKey)'
  

# Terraform Validate
- task: TerraformCLI@0
  displayName: 'Terraform Validate'
  inputs:
    backendType: 'aws'
    command: 'validate'
    workingDirectory: '$(System.DefaultWorkingDirectory)/session5/'
    providerServiceAws: $(providerServiceAws)

# Install Go
- task: GoTool@0
  displayName: 'Go Install'
  inputs:
    version: '1.18.2'

# Create test module
- task: Go@0
  displayName: 'Create test module'  
  inputs:
    command: 'custom'
    customCommand: 'mod'
    arguments: 'init module'
    workingDirectory: '$(System.DefaultWorkingDirectory)/session5/Modules/Deployment/Compute/tests'

# Add module dependencies
- task: Go@0
  displayName: 'Get test dependencies'
  inputs:
    command: 'custom'
    customCommand: 'mod'
    arguments: 'tidy'
    workingDirectory: '$(System.DefaultWorkingDirectory)/session5/Modules/Deployment/Compute/tests'

# Run Go Test
- task: Go@0
  displayName: 'Run tests'
  inputs:
    command: 'test'
    arguments: '-timeout 1h -v unit_test.go'
    workingDirectory: '$(System.DefaultWorkingDirectory)/session5/Modules/Deployment/Compute/tests'
    AWS Credentials : $(providerServiceAws)
  # env:
  #     AWS_ACCESS_KEY_ID: $(ACCESS_KEY_ID)
  #     AWS_SECRET_ACCESS_KEY: $(SECRET_ACCESS_KEY)
  #     ARM_CLIENT_SECRET: $(ServicePrincipalKey)
  #     ARM_SUBSCRIPTION_ID: $(SubscriptionId)


  condition: or(eq(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.Reason'], 'Manual'))
  pool:
  vmImage: 'ubuntu-latest'


# Install Terraform
- task: TerraformInstaller@0
  displayName: 'Terraform Install'
  inputs:
    terraformVersion: 'latest'

# Install Go
- task: GoTool@0
  displayName: 'Go Install'
  inputs:
    version: '1.18.2'

# Create test module
- task: Go@0
  displayName: 'Create test module'  
  inputs:
    command: 'custom'
    customCommand: 'mod'
    arguments: 'init module'
    workingDirectory: '$(System.DefaultWorkingDirectory)/session5/Modules/Deployment/Compute/tests'

# Add module dependencies
- task: Go@0
  displayName: 'Get test dependencies'
  inputs:
    command: 'custom'
    customCommand: 'mod'
    arguments: 'tidy'
    workingDirectory: '$(System.DefaultWorkingDirectory)/session5/Modules/Deployment/Compute/tests'

# Run Go Test
- task: Go@0
  displayName: 'Run tests'
  inputs:
    command: 'test'
    arguments: '-timeout 1h -v integration_test.go'
    workingDirectory: '$(System.DefaultWorkingDirectory)/session5/Modules/Deployment/Compute/tests'
    AWS Credentials : $(providerServiceAws)
  # env:
  #     AWS_ACCESS_KEY_ID: $(TenantId)
  #     AWS_SECRET_ACCESS_KEY: $(SECRET_ACCESS_KEY)
  #     ARM_CLIENT_SECRET: $(ServicePrincipalKey)
  #     ARM_SUBSCRIPTION_ID: $(SubscriptionId)    